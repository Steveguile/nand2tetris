// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise        
        ng; // 1 if (out < 0),  0 otherwise
        
    PARTS:
        // Sixteen bit bus
        Mux16(a=x, b=false, sel=zx, out=zerox);      // get x = 0
        Not16(in=zerox, out=notx);                      // get x = !x
        Mux16(a=zerox, b=notx, sel=nx, out=xfinish);   // if nx is 1 return negation of x

        Mux16(a=y, b=false, sel=zy, out=zeroy);      // set y = 0
        Not16(in=zeroy, out=noty);                      // get y = !y
        Mux16(a=zeroy, b=noty, sel=ny, out=yfinish);   // if ny is 1 return negation of x

        Add16(a=xfinish, b=yfinish, out=xaddy); // compute x + y
        And16(a=xfinish, b=yfinish, out=xandy); // compute x & y
        Mux16(a=xandy, b=xaddy, sel=f, out=andoradd); // use either add or and 

        Not16(in=andoradd, out=notandoradd);
        Mux16(a=andoradd, b=notandoradd, sel=no, out=tempout); // select which one to use

        // Single bit outputs
        And16(a=tempout, b=true, out[15]=ng);     // last bit is 1 AND 1 - output ng = 1

        Or16Way(in=tempout, out=ortemp);
        Not(in=ortemp, out=zr); // If tempout Or16 came back as zero set to 1

        // Final out
        Or16(a=tempout, b=false, out=out); // output

}