// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:

    // address == 000000
    // RAM1 = 000000 - 000111 (0-7)
    // RAM2 = 001000 - 001111 (8-15)
    // RAM3 = 010000 - 010111 (16-23)
    // RAM4 = 011000 - 011111 (24-31)
    // RAM5 = 100000 - 100111 (32-39)
    // RAM6 = 101000 - 101111 (40-47)
    // RAM7 = 110000 - 110111 (48-55)
    // RAM8 = 111000 - 111111 (56-63)

    // Select load bit for each position (first 3 bits in end of range above e.g. xxx111)
    DMux8Way(in=load, sel=address[3..5], a=loadone, b=loadtwo, c=loadthree, d=loadfour, e=loadfive, f=loadsix, g=loadseven, h=loadeight);

    / Pass in the RAM8 selector bits (last 3 bits of range above e.g 111xxx)
    RAM8(in=in, load=loadone, address=address[0..2], out=out1);
    RAM8(in=in, load=loadtwo, address=address[0..2], out=out2);
    RAM8(in=in, load=loadthree, address=address[0..2], out=out3);
    RAM8(in=in, load=loadfour, address=address[0..2], out=out4);
    RAM8(in=in, load=loadfive, address=address[0..2], out=out5);
    RAM8(in=in, load=loadsix, address=address[0..2], out=out6);
    RAM8(in=in, load=loadseven, address=address[0..2], out=out7);
    RAM8(in=in, load=loadeight, address=address[0..2], out=out8);

    Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address[3..5], out=out);

}