

class Hoop {

    static int screen; 
    field int hoopPosition; // Value of set screenPosition constructor parameter
    field int memAddress; // Position of the hoop

    constructor Hoop new(int screenPosition) {
        let screen = 16384; // Start point of screen map in memory (should really be a const outside of object but this'll do)
        let hoopPosition = screenPosition; // Save screen position to attribute
        do draw(screenPosition);
        return this;
    }

    /* cleanup this hoop */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

    /* checks if position of object's top left falls within valid screen positions*/
    method bool inHoop(int ballPosition) {
        var bool awardScore; // Return value 
        var int hoopLoop; // Hoop range loop
        var int hoopRowPosition; // current row range checker

        let hoopLoop = 0;
        let hoopRowPosition = hoopPosition;

        // Hoop allows hitting rim in square around it
        // The following are range conditions for a square over the hoop
        // Choose 31 because hoop is 30 rows high
        while(hoopLoop < 31) {
            // Check if before end of hoop on current row
            if (ballPosition < (hoopRowPosition + 2)) {
                // Check if after start of hoop on current row
                if (ballPosition > (hoopRowPosition - 2)) {
                    let awardScore = true;
                    let hoopLoop = 31; // exit loop
                }
            }

            // Check if in next row range
            let hoopRowPosition = hoopRowPosition + 32;
            let hoopLoop = hoopLoop + 1; // Increment hoopLoop
        }
        return awardScore;
    }

    /* Draws shape of hoop */
    method void draw(int location) {
        let memAddress = screen+location;

        // North West
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, -4096);
        do Memory.poke(memAddress+64, 3584);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 96);
        do Memory.poke(memAddress+160, 16);
        do Memory.poke(memAddress+192, 16);
        do Memory.poke(memAddress+224, 8);
        do Memory.poke(memAddress+256, 8);
        do Memory.poke(memAddress+288, 4);
        do Memory.poke(memAddress+320, 4);
        do Memory.poke(memAddress+352, 4);
        do Memory.poke(memAddress+384, 2);
        do Memory.poke(memAddress+416, 2);
        do Memory.poke(memAddress+448, 2);
        do Memory.poke(memAddress+480, 2);

        let memAddress = memAddress + 1; // (for next 16 bits)

        // North East
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 15);
        do Memory.poke(memAddress+64, 112);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 1536);
        do Memory.poke(memAddress+160, 2048);
        do Memory.poke(memAddress+192, 2048);
        do Memory.poke(memAddress+224, 4096);
        do Memory.poke(memAddress+256, 4096);
        do Memory.poke(memAddress+288, 8192);
        do Memory.poke(memAddress+320, 8192);
        do Memory.poke(memAddress+352, 8192);
        do Memory.poke(memAddress+384, 16384);
        do Memory.poke(memAddress+416, 16384);
        do Memory.poke(memAddress+448, 16384);
        do Memory.poke(memAddress+480, 16384);

        let memAddress = memAddress + 479; // (16 rows down - 16 bit)

        // South West
        do Memory.poke(memAddress+0, 2);
        do Memory.poke(memAddress+32, 2);
        do Memory.poke(memAddress+64, 2);
        do Memory.poke(memAddress+96, 2);
        do Memory.poke(memAddress+128, 4);
        do Memory.poke(memAddress+160, 4);
        do Memory.poke(memAddress+192, 4);
        do Memory.poke(memAddress+224, 8);
        do Memory.poke(memAddress+256, 8);
        do Memory.poke(memAddress+288, 16);
        do Memory.poke(memAddress+320, 16);
        do Memory.poke(memAddress+352, 96);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 3584);
        do Memory.poke(memAddress+448, -4096);
        do Memory.poke(memAddress+480, 0);        

        let memAddress = memAddress + 1;

        // South East
        do Memory.poke(memAddress+0, 16384);
        do Memory.poke(memAddress+32, 16384);
        do Memory.poke(memAddress+64, 16384);
        do Memory.poke(memAddress+96, 16384);
        do Memory.poke(memAddress+128, 8192);
        do Memory.poke(memAddress+160, 8192);
        do Memory.poke(memAddress+192, 8192);
        do Memory.poke(memAddress+224, 4096);
        do Memory.poke(memAddress+256, 4096);
        do Memory.poke(memAddress+288, 2048);
        do Memory.poke(memAddress+320, 2048);
        do Memory.poke(memAddress+352, 1536);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 112);
        do Memory.poke(memAddress+448, 15);
        do Memory.poke(memAddress+480, 0);        

        return;
    }

}