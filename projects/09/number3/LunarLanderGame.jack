
/**
 * Implements the Lunar Lander game.
 * This simple game allows the user to move a Lunar Lander around
 * the screen. The object is to land it inside the 2 bars at the bottom.
 * without wiping out the bars.
 * When the game starts, a Lunar Lander is shown at the
 * top-left corner of the screen, but starts immediately to drop.
 * The user controls the Lunar Lander as follows.
 * The 4 arrow keys are used to move the Lunar Lander up, down, left, and right.
 * The 'q' key is used to quit the game.
 */

class LunarLanderGame {
   field LunarLander lander; // the lander of this game
   field int direction; // the lander's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right

   /** Constructs a new Lunar Lander Game. */
   constructor LunarLanderGame new() {      
      let lander = LunarLander.new(0, 0);
      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do lander.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveLander() {
      if (direction = 1) { do lander.moveUp(15);do Sys.wait(15); let direction = 0; }
      if (direction = 2) { do lander.moveDown(10);do Sys.wait(15); let direction = 0; }
      if (direction = 3) { do lander.moveLeft(10);do Sys.wait(15); let direction = 0; }
      if (direction = 4) { do lander.moveRight(10); do Sys.wait(15); let direction = 0; }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the lander accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {         
         // waits for a key to be pressed
         while (key = 0) { 
         
         do lander.moveDown(1);
            let key = Keyboard.keyPressed();
            do moveLander();
         }
         if (key = 81)  { let exit = true; }     // q key         
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveLander();
         }
     } // while
     return;
   }
}



