// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384+16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let i = 0;
        let shiftedX = x;

        // bit depth (16)
        while (i < 16) {
            if (Math.bit(y, i)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Return true if the i-th bit of x is 1, otherwise false **/
    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the integer part of x/y. 
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        var int recur;

        let x = Math.abs(x);
        let y = Math.abs(y);

        // No decimals
        if (y > x) {
            return 0;
        }
        let recur = Math.divide(x, y+y);
        if(x-(2*recur*y) < y) {
            let result = recur+recur;
        }
        else {
            let result = recur+recur+1;
        }

        if(x < 0 & y < 0) {
            return result;
        } else {
            return -result; 
        }

    }

    /** Returns the length of an integer in bits **/
    function int intLength(int x) {
        if (x < 0) {return Math.intLength(-x);}
		if (x < 2) {return 1;}
		if (x < 4) {return 2;}
		if (x < 8) {return 3;}
		if (x < 16) {return 4;}
		if (x < 32) {return 5;}
		if (x < 64) {return 6;}
		if (x < 128) {return 7;}
		if (x < 256) {return 8;}
		if (x < 512) {return 9;}
		if (x < 1024) {return 10;}
		if (x < 2048) {return 11;}
		if (x < 4096) {return 12;}
		if (x < 8192) {return 13;}
		if (x < 16384) {return 14;}
		return 15;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        let y = 0;
        let j = Math.intLength(x) / 2;

        while(j > -1) {
            if (~((Math.square((y + Math.powerTwo(j))) < 0) | (Math.square((y + Math.powerTwo(j))) > x))) {
				let y = y + Math.powerTwo(j);
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the 2 to the power of i */
	function int powerTwo(int i) {
        return twoToThe[i];
    }
	
	/** Returns the product of x multiplied by x */
	function int square(int x) {
        return Math.multiply(x, x);
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int ret;
        let ret = a;
        if(a < b) {
            let ret = b;  
        }
        return ret;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int ret;
        let ret = b;
        if(a < b) {
            let ret = a;  
        }
        return ret;
    }
}
